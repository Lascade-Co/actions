name: Vercel Deploy

on:
  repository_dispatch:
    types: [vercel-commit]
  workflow_dispatch:
    inputs:
      repo:
        description: "Target repository (e.g. user/repo)"
        required: true
      branch:
        description: "Branch to deploy (e.g. main)"
        required: true
      project_slug:
        description: "The inficial project slug"
        required: true

permissions:
  contents: read

concurrency:
  group: vercel-commit-${{ github.event.client_payload.repo }}-${{ github.event.client_payload.branch }}
  cancel-in-progress: true

jobs:
  vercel-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Determine repo & branch
        id: prepare
        run: |
          REPO="${{ github.event.client_payload.repo || github.event.inputs.repo }}"
          BRANCH="${{ github.event.client_payload.branch || github.event.inputs.branch }}"
          SLUG="${{ github.event.client_payload.project_slug || github.event.inputs.project_slug }}"
          
          echo "repo=$REPO" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "owner=${REPO%%/*}" >> "$GITHUB_OUTPUT"
          echo "name=${REPO#*/}" >> "$GITHUB_OUTPUT"
          echo "project_slug=$SLUG" >> "$GITHUB_OUTPUT"
          
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "type=prod" >> "$GITHUB_OUTPUT"
          else
            echo "type=staging" >> "$GITHUB_OUTPUT"
          fi

      - name: Import env secrets from Infisical
        uses: Infisical/secrets-action@v1.0.9
        with:
          # Auth method: universal (client credentials)
          method: universal
          client-id: ${{ secrets.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          # Project / environment
          project-slug: ${{ steps.prepare.outputs.project_slug }}
          env-slug: ${{ steps.prepare.outputs.type }}
          # Self-hosted domain
          domain: ${{ secrets.INFISICAL_DOMAIN }}
          secret-path: Build

      - name: Mint GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.CI_APP_ID }}
          private-key: ${{ secrets.CI_APP_PRIVATE_KEY }}
          owner: ${{ steps.prepare.outputs.owner }}
          repositories: ${{ steps.prepare.outputs.name }}

      - name: Checkout target repo @ branch
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.prepare.outputs.repo }}
          ref: ${{ steps.prepare.outputs.branch }}
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0

      - name: Configure git identity
        run: |
          git config user.name  "Lascadesevices"
          git config user.email "services@lascade.com"

      - name: Configure Vercel Project
        run: |
          mkdir .vercel
          echo "${{ env.VERCEL_PROJECT_BASE64 }}" | base64 --decode > .vercel/project.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Create empty commit
        id: commit
        run: |
          git commit --allow-empty -m "chore: vercel deploy"

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          if [[ "${{ steps.prepare.outputs.type }}" == "prod" ]]; then
            echo "Production deploy"
            vercel deploy --token "$VERCEL_TOKEN" --prod --yes
          else
            echo "Preview deploy"
            vercel deploy --token "$VERCEL_TOKEN" --yes
          fi
