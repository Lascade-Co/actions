name: Vercel Deployment

on:
  push:
    branches:
      - staging
      - production
  pull_request_target:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  pull-requests: write
  deployments: write
  contents: read
  checks: read
  statuses: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Branch Deploy
        uses: github/branch-deploy@v9.9.1
        id: branch-deploy
        with:
          trigger: ".deploy"
          environment: "dev"
          environment_targets: "dev,prod"
          
      - name: Checkout repository
        if: ${{ steps.branch-deploy.outputs.continue == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.branch-deploy.outputs.ref || github.ref }}

      - name: Set up Node.js
        if: ${{ steps.branch-deploy.outputs.continue == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        if: ${{ steps.branch-deploy.outputs.continue == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        run: npm ci

      - name: Install Vercel CLI
        if: ${{ steps.branch-deploy.outputs.continue == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        run: npm install -g vercel@latest

      - name: Set environment variables
        if: ${{ steps.branch-deploy.outputs.continue == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/production" || "${{ github.event.inputs.environment }}" == "prod" || "${{ steps.branch-deploy.outputs.environment }}" == "prod" ]]; then
            echo "VERCEL_TOKEN=${{ secrets.VERCEL_PROD_TOKEN }}" >> $GITHUB_ENV
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          else
            echo "VERCEL_TOKEN=${{ secrets.VERCEL_DEV_TOKEN }}" >> $GITHUB_ENV
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
          fi

      - name: Remove .vercel directory if exists
        if: ${{ steps.branch-deploy.outputs.continue == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        run: |
          if [ -d ".vercel" ]; then
            rm -rf .vercel
          fi

      - name: Deploy to Vercel
        if: ${{ steps.branch-deploy.outputs.continue == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        id: deploy
        run: |
          DEPLOY_URL=$(vercel deploy --prod --yes --token=${{ env.VERCEL_TOKEN }})
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && github.event_name == 'issue_comment' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: `ðŸš€ Deployed to: ${{ env.DEPLOY_URL }}`
            });

      - name: Create deployment status
        if: ${{ steps.branch-deploy.outputs.continue == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ref = context.sha;
            const environment = '${{ env.DEPLOY_ENV }}';
            const url = '${{ env.DEPLOY_URL }}';
            
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref,
              environment,
              auto_merge: false,
              required_contexts: [],
              description: `Deployment to ${environment}`
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: url,
              log_url: url,
              description: `Deployed to ${environment}`
            });
