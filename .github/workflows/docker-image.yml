name: "Docker Build and Push"

on:
  repository_dispatch:
    types: [docker-build]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      owner: ${{ steps.repo.outputs.owner }}
      name: ${{ steps.repo.outputs.name }}
      branch: ${{ steps.branch.outputs.branch }}
    steps:
      - name: Extract owner/repo
        id: repo
        run: |
          FULL="${{ github.event.client_payload.repo }}"
          echo "owner=${FULL%%/*}" >> "$GITHUB_OUTPUT"
          echo "name=${FULL#*/}"   >> "$GITHUB_OUTPUT"

      - name: Resolve branch
        id: branch
        run: |
          BR="${{ github.event.client_payload.branch }}"
          echo "branch=${BR:-main}" >> "$GITHUB_OUTPUT"

  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Mint GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.CI_APP_ID }}
          private-key: ${{ secrets.CI_APP_PRIVATE_KEY }}
          owner: ${{ needs.prepare.outputs.owner }}
          repositories: ${{ needs.prepare.outputs.name }}

      - name: Checkout target repo @ branch
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repo }}
          ref: refs/heads/${{ needs.prepare.outputs.branch }}
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0
          submodules: "recursive"

      - name: Get commit SHA
        id: commit
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          load: true
          context: '.'
          file: 'Dockerfile'
          tags: |
            ${{ secrets.REGISTRY }}/${{ github.event.client_payload.container_name }}:${{ steps.commit.outputs.sha }}
            ${{ secrets.REGISTRY }}/${{ github.event.client_payload.container_name }}:latest

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: |
          docker push ${{ secrets.REGISTRY }}/${{ github.event.client_payload.container_name }}:${{ steps.commit.outputs.sha }}
          docker push ${{ secrets.REGISTRY }}/${{ github.event.client_payload.container_name }}:latest
