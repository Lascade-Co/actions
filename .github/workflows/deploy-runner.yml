# Required Parameters
# repo, pr, project_slug, env_slug, branch, comment_body

name: "Branch Deploy"

on:
  repository_dispatch:
    types: [deploy-pr]

permissions:
  contents: write
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Extract owner/repo
        id: repo
        shell: bash
        run: |
          FULL="${{ github.event.client_payload.repo }}"   # e.g. Lascade-Co/travel-animator-android
          echo "owner=${FULL%%/*}" >> "$GITHUB_OUTPUT"     # Lascade-Co
          echo "name=${FULL#*/}"   >> "$GITHUB_OUTPUT"     # travel-animator-android

      # Mint a GitHub App token scoped to that one repo
      - name: Mint GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.CI_APP_ID }}
          private-key: ${{ secrets.CI_APP_PRIVATE_KEY }}
          owner: ${{ steps.repo.outputs.owner }}
          repositories: ${{ steps.repo.outputs.name }}

      - name: Purge previous comments from this workflow
        if: ${{ github.event.client_payload.pr && github.event.client_payload.pr != '' && github.event.client_payload.pr != 'null' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const [owner, repo] = "${{ github.event.client_payload.repo }}".split("/");
            const issue_number = Number("${{ github.event.client_payload.pr }}");
            const markers = [ 
              "<!-- deploy-pr-${{ github.event.client_payload.env_slug }} -->",
              "### Deployment"
            ];
            const comments = await github.paginate(
              github.rest.issues.listComments,
              { owner, repo, issue_number, per_page: 100 }
            );
            let deleted = 0;
            for (const c of comments) {
              if (markers.find((m) => (c.body || "").includes(m))) {
                await github.rest.issues.deleteComment({ owner, repo, comment_id: c.id });
                deleted++;
              }
            }
            core.info(`Deleted ${deleted} prior deploy-pr comments`);

      - name: Comment on PR About Action Status
        uses: peter-evans/create-or-update-comment@v4
        id: status
        with:
          edit-mode: 'replace'
          token: ${{ steps.app-token.outputs.token }}
          repository: ${{ github.event.client_payload.repo }}
          issue-number: ${{ github.event.client_payload.pr }}
          body: |
            <!-- deploy-pr-${{ github.event.client_payload.env_slug }} -->
            üèóÔ∏è Deploy started.
            Watch progress [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}

      # Import secrets from Infisical
      - name: Import env secrets from Infisical
        uses: Infisical/secrets-action@v1.0.9
        with:
          # Auth method: universal (client credentials)
          method: universal
          client-id: ${{ secrets.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          # Project / environment
          project-slug: ${{ github.event.client_payload.project_slug }}
          env-slug: ${{ github.event.client_payload.env_slug }}
          # Self-hosted domain
          domain: ${{ secrets.INFISICAL_DOMAIN }}
          # Export to a .env file in the workspace
          export-type: file
          file-output-path: /.env

      - name: Extract Env
        id: extract
        run: |
          source .env
          echo "host=$HOST" >> "$GITHUB_OUTPUT"

      - name: Add SSH key to known hosts
        run: ssh-keyscan -H "${{ steps.extract.outputs.host }}" >> ~/.ssh/known_hosts

      - name: Create SSH Script
        run: |
          echo "ssh -i ~/.ssh/private.key \"ubuntu@$HOST\" \$@" > s.sh
          chmod +x s.sh
        env:
          HOST: ${{ steps.extract.outputs.host }}

      - name: Copy .env to droplet project folder
        run: scp -i ~/.ssh/private.key .env "ubuntu@$HOST:$PROJECT_FOLDER/.env"
        env:
          PROJECT_FOLDER: ${{ steps.repo.outputs.name }}
          HOST: ${{ steps.extract.outputs.host }}

      - name: Deploy
        run: ./s.sh "deploy ${{ github.event.client_payload.branch }}"

      - name: Wait for server healthcheck
        run: |
          timeout=30
          interval=2
          elapsed=0
          url="https://$HOST/healthcheck/"

          until curl --fail --silent $url; do
            if [ $elapsed -ge $timeout ]; then
              echo "Healthcheck timed out after $timeout seconds"
              exit 1
            fi
            echo "Waiting for healthcheck ($elapsed/$timeout)..."
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          echo "Server is healthy."
        env:
          HOST: ${{ steps.extract.outputs.host }}

      - name: Run migrations
        run: ./s.sh "shell server run python manage.py migrate"

      - name: Decide restart targets
        id: decide
        shell: bash
        run: |
          set -euo pipefail
          body="${{ github.event.client_payload.comment_body }}"
          if echo "$body" | grep -qi '\bserver\b'; then
            echo "server=true" >> "$GITHUB_OUTPUT"
          else
            echo "server=false" >> "$GITHUB_OUTPUT"
          fi
          if echo "$body" | grep -qi '\bcelery\b'; then
            echo "celery=true" >> "$GITHUB_OUTPUT"
          else
            echo "celery=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Restart server
        if: ${{ steps.decide.outputs.server == 'true' }}
        run: ./s.sh "shell server restart"

      - name: Restart celery
        if: ${{ steps.decide.outputs.celery == 'true' }}
        run: ./s.sh "shell celery restart"

      - name: Comment on PR With Success Status
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          repository: ${{ github.event.client_payload.repo }}
          issue-number: ${{ github.event.client_payload.pr }}
          comment-id: ${{ steps.status.outputs.comment-id }}
          edit-mode: 'replace'
          body: |
            <!-- deploy-pr-${{ github.event.client_payload.env_slug }} -->
            ‚úÖ Branch Deployed to ${{ github.event.client_payload.env_slug }}

      # ---------- Failure comment ----------
      - name: Comment on PR if build failed
        if: ${{ failure() && github.event.client_payload.pr && github.event.client_payload.pr != '' && github.event.client_payload.pr != 'null' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.status.outputs.comment-id }}
          token: ${{ steps.app-token.outputs.token }}
          repository: ${{ github.event.client_payload.repo }}
          issue-number: ${{ github.event.client_payload.pr }}
          edit-mode: 'replace'
          body: |
            <!-- deploy-pr-${{ github.event.client_payload.env_slug }} -->
            ‚ùå Deploy failed for ${{ github.event.client_payload.env_slug }}
            [Check logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})


