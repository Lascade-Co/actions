name: "Branch Deploy with Infisical"

on:
  workflow_call:

permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read
  statuses: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: github/branch-deploy@v9.9.1
        id: branch-deploy
        with:
          trigger: ".deploy"
          environment: "test"
          environment_targets: "test,prod,staging"

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-deploy.outputs.ref }}
          submodules: "recursive"
      
      # Import secrets from Infisical
      - name: Import secrets from Infisical
        uses: Infisical/secrets-action@v1.0.9
        with:
          # Auth method: universal (client credentials)
          method: universal
          client-id: ${{ secrets.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          # Project / environment
          project-slug: ${{ secrets.INFISICAL_PROJECT_SLUG }}
          env-slug: ${{ steps.branch-deploy.outputs.environment }}
          # Self-hosted domain
          domain: ${{ secrets.INFISICAL_DOMAIN }}
          # Export as environment variables for subsequent steps (default)
          export-type: env

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}

      - name: Set deploy host variables
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: echo "HOST=${{ env.HOST }}" >> "$GITHUB_ENV"

      - name: Add SSH key to known hosts
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: |
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Pull latest image
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: |
          ssh -i ~/.ssh/private.key "${{ secrets.DROPLET_USERNAME }}@$HOST" "docker pull ${{ secrets.REGISTRY_NAME }}/${{ secrets.CONTAINER_NAME }}:latest"

      - name: Prepare remote env vars
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          # Build env_string from current environment, excluding runner/system/internal vars
          env_string=""
          while IFS='=' read -r name value; do
            case "$name" in
              # Exclude GitHub runner/system variables
              GITHUB_*|RUNNER_*|ACTIONS_*|CI|NODE_*|INPUT_*|STATE_*|STEP_*|PWD|HOME|PATH|SHLVL|OLDPWD|SHELL|_|DEBIAN_*|UBUNTU_*|VCPKG_*|XDG_*|LANG|LC_*)
                continue
                ;;
              # Exclude sensitive auth/material not meant for the droplet
              SSH_PRIVATE_KEY|INFISICAL_CLIENT_ID|INFISICAL_CLIENT_SECRET|INFISICAL_*)
                continue
                ;;
              # Avoid recursive inclusion
              REMOTE_ENV_VARS)
                continue
                ;;
              *)
                env_string+="${name}=$(printf %q "$value") "
                ;;
            esac
          done < <(env)

          echo "REMOTE_ENV_VARS=$env_string" >> "$GITHUB_ENV"

      - name: Deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: ssh -i ~/.ssh/private.key "${{ secrets.DROPLET_USERNAME }}@$HOST" "${REMOTE_ENV_VARS} deploy $BRANCH"
        env:
          BRANCH: ${{ steps.branch-deploy.outputs.ref }}

      - name: Wait for server healthcheck
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: |
          timeout=30
          interval=2
          elapsed=0
          url="https://$HOST/healthcheck/"

          until curl --fail --silent $url; do
            if [ $elapsed -ge $timeout ]; then
              echo "Healthcheck timed out after $timeout seconds"
              exit 1
            fi
            echo "Waiting for healthcheck ($elapsed/$timeout)..."
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          echo "Server is healthy."

      - name: Run migrations
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: |
          ssh -i ~/.ssh/private.key "${{ secrets.DROPLET_USERNAME }}@$HOST" "shell server run python manage.py migrate"
