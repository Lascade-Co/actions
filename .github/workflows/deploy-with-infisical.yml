name: "Branch Deploy with Infisical"

on:
  workflow_call:

permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read
  statuses: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: github/branch-deploy@v9.9.1
        id: branch-deploy
        with:
          trigger: ".deploy"
          environment: "test"
          environment_targets: "test,prod,staging"

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-deploy.outputs.ref }}
          submodules: "recursive"
      
      # Import secrets from Infisical
      - name: Import secrets from Infisical
        uses: Infisical/secrets-action@v1.0.9
        with:
          # Auth method: universal (client credentials)
          method: universal
          client-id: ${{ secrets.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          # Project / environment
          project-slug: ${{ secrets.INFISICAL_PROJECT_SLUG }}
          env-slug: ${{ steps.branch-deploy.outputs.environment }}
          # Self-hosted domain
          domain: ${{ secrets.INFISICAL_DOMAIN }}
          # Export to a .env file in the workspace
          export-type: file
          file-output-path: /.env

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}

      - name: Set deploy host from .env
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "$GITHUB_WORKSPACE/.env" ]; then
            echo ".env not found; ensure Infisical export succeeded" >&2
            exit 1
          fi
          cat $GITHUB_WORKSPACE/.env
          # Read HOST and sanitize: trim whitespace/CR and strip surrounding single/double quotes
          RAW_HOST=$(grep -E '^HOST=' "$GITHUB_WORKSPACE/.env" | tail -n 1 | cut -d'=' -f2-)
          RAW_HOST=${RAW_HOST%$'\r'}
          RAW_HOST=$(echo "$RAW_HOST" | sed -e 's/^\s*//' -e 's/\s*$//')
          # strip surrounding quotes if present
          case "$RAW_HOST" in
            \"*\") RAW_HOST=${RAW_HOST#\"}; RAW_HOST=${RAW_HOST%\"} ;;
            "'*'") RAW_HOST=${RAW_HOST#\'}; RAW_HOST=${RAW_HOST%\'} ;;
          esac
          HOST_VALUE="$RAW_HOST"
          if [ -z "${HOST_VALUE}" ]; then
            echo "HOST not found in .env" >&2
            exit 1
          fi
          echo "HOST=${HOST_VALUE}" >> "$GITHUB_ENV"

      - name: Add SSH key to known hosts
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: |
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Pull latest image
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: |
          ssh -i ~/.ssh/private.key "${{ secrets.DROPLET_USERNAME }}@$HOST" "docker pull ${{ secrets.REGISTRY_NAME }}/${{ secrets.CONTAINER_NAME }}:latest"

      - name: Resolve project folder on droplet
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        id: project-folder
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_FOLDER=$(ssh -i ~/.ssh/private.key "${{ secrets.DROPLET_USERNAME }}@$HOST" 'if [ -f /opt/project_folder ]; then cat /opt/project_folder; else echo "Project folder not set, using current directory" >&2; pwd; fi')
          echo "project_folder=$PROJECT_FOLDER" >> "$GITHUB_OUTPUT"

      - name: Copy .env to droplet project folder
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: |
          scp -i ~/.ssh/private.key "$GITHUB_WORKSPACE/.env" "${{ secrets.DROPLET_USERNAME }}@$HOST:${{ steps.project-folder.outputs.project_folder }}/.env"

      - name: Deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: ssh -i ~/.ssh/private.key "${{ secrets.DROPLET_USERNAME }}@$HOST" "deploy $BRANCH"
        env:
          BRANCH: ${{ steps.branch-deploy.outputs.ref }}

      - name: Wait for server healthcheck
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: |
          timeout=30
          interval=2
          elapsed=0
          url="https://$HOST/healthcheck/"

          until curl --fail --silent $url; do
            if [ $elapsed -ge $timeout ]; then
              echo "Healthcheck timed out after $timeout seconds"
              exit 1
            fi
            echo "Waiting for healthcheck ($elapsed/$timeout)..."
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          echo "Server is healthy."

      - name: Run migrations
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: |
          ssh -i ~/.ssh/private.key "${{ secrets.DROPLET_USERNAME }}@$HOST" "shell server run python manage.py migrate"
